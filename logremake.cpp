#include <QDebug>
#include <QVBoxLayout>
#include <QPushButton>
#include <QFileDialog>
#include <QFile>
#include <QPair>

#include "logremake.h"


static QStringList temp_wet =
{
    "  —òAffB–∂", "–ù–ú¬∞A—ô‚Ñ¢Bv–ô", "33–áAffB—Å–±–®", "  “ëA–ù–úB‚Äî¬ª–°", "ff–ÜA–ù–úB–ø–ú",
    "33–áA33B–´–¨–û", "33–áAffB{¬§–¢", "  “ëAffB–©–ô", "  —ëAffBz¬§¬µ", "  ¬òA   B0¬±—û",
    "–ù–ú¬òAffB[‚Ä∫", "  ¬òA33B¬Æ–ë–ã", "33‚ÄîAffB%y–è", "ff—ôA  (BV–≠–ë", "33—ñA–ù–ú&BX–Ω",
    "–ù–ú—ëA33B–ø–Ω", "33¬ªA—ô‚Ñ¢B–Æ–£", "  –êAffB—Ñ–û—ä", "–ù–ú—öA—ô‚Ñ¢B-–Ω¬¨", "33¬´A–ù–úB–í–á–ï",
    "ff–ÑA–ù–úB–®–í", "  ¬∞A—ô‚Ñ¢B‚Ä∫‚Ññ", "—ô‚Ñ¢¬±AffB “ë", "33–áAffB>–∫—ë", "—ô‚Ñ¢“êA  0B—ç ",
    "—ô‚Ñ¢“êAff.B8–ù—ã", "fffA  <B—íN"
};

logRemake::logRemake(QWidget *parent) : QDialog(parent), m_settings("Decay", "logRemake")
{
    this->setWindowFlags(this->windowFlags() & ~Qt::WindowContextHelpButtonHint & Qt::WindowMinimized);
    resize(400, 400);
    m_strLastOpenPath = "c:\\";

    //buttons
    m_pBtnLoadFile = new QPushButton("Load file");
    m_pBtnReadFile = new QPushButton("Read file");
    m_pBtnRemakeFile = new QPushButton("Remake file");
    m_pBtnClose = new QPushButton("Close");
    m_pBtnReadFile->setEnabled(false);
    m_pBtnRemakeFile->setEnabled(false);

    //btn layout
    m_pBtnLayout = new QVBoxLayout();
    m_pBtnLayout->addWidget(m_pBtnLoadFile);
    m_pBtnLayout->addWidget(m_pBtnReadFile);
    m_pBtnLayout->addWidget(m_pBtnRemakeFile);
    m_pBtnLayout->addWidget(m_pBtnClose);

    //main layout
    m_pMainLayout = new QVBoxLayout(this);
    m_pMainLayout->addLayout(m_pBtnLayout);
    setLayout(m_pMainLayout);

    //connect
    connect(m_pBtnLoadFile, &QPushButton::clicked, this, &logRemake::loadFile);
    connect(m_pBtnReadFile, &QPushButton::clicked, this, &logRemake::readDataFromFile);
    connect(m_pBtnClose, &QPushButton::clicked, this, &logRemake::close);
    readSettings();
}

void logRemake::readSettings()
{
    m_settings.beginGroup("/logRemakeSettings");
    int nWidth = m_settings.value("/Width", width()).toInt();
    int nHeight = m_settings.value("/Height", height()).toInt();
    m_strLastOpenPath = m_settings.value("/LastOpenFilePath", "c:\\").toString();
    resize(nWidth, nHeight);
    m_settings.endGroup();
}

void logRemake::writeSettings()
{
    m_settings.beginGroup("/logRemakeSettings");
    m_settings.setValue("/Width", width());
    m_settings.setValue("/Height", height());
    if (filesPath.size() > 0) {
        m_settings.setValue("/LastOpenFilePath", QFileInfo(filesPath.at(0)).filePath());
    }
    m_settings.endGroup();
}

void logRemake::loadFile()
{
    filesPath = QFileDialog::getOpenFileNames(this,
                                              QObject::tr("Open LogPro file"),
                                              m_strLastOpenPath,
                                              QObject::tr("logp files (*.logp)"));
    if (!filesPath.isEmpty()) {
        m_pBtnReadFile->setEnabled(true);
        m_pBtnRemakeFile->setEnabled(true);
    }
    else
        return;
}

void logRemake::readDataFromFile()
{
    //read input data from file
    QString dataFromFile;
    QFile inputFile(filesPath.at(0));
    if  (inputFile.open(QIODevice::ReadOnly))
    {
        QTextStream in(&inputFile);
        dataFromFile = in.readAll();
    }
    inputFile.close();

    //start workin with data
    QString str;
    QString buffer;
    QStringList data;
    int point1 = 0, point2 = 0;

    for (int i(0); i < (dataFromFile.size()); ++i) //  read for matches
    {
        if (dataFromFile.at(i) == '2'
                && dataFromFile.at(i + 1) == '0'
                && dataFromFile.at(i + 2) == '1'
                && dataFromFile.at(i + 3) == '4'
                && (i < dataFromFile.size()))
        {
            point1 = i + 1;
            for (int j(0); j < 14; ++j) // –ø—Ä–æ—Ö–æ–¥–∏–º –≤–ø–µ—Ä—ë–¥ –Ω–∞ 15 —Å–∏–º–≤–æ–ª–æ–≤
            {
                if (dataFromFile.at(i + j).isDigit())
                {
                    buffer += dataFromFile.at(i + j);
                }
                else
                {
                    buffer.clear();
                }
            }

            if(buffer.size() == 14)
            {
                point2 = i + 15;    //–Ω–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –¥–∞—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                data.push_back(buffer);
                buffer.clear();
                cords.push_back(qMakePair(point1, point2));
            }
        }
    }
    qDebug() << data;
    qDebug() << "Size:" << data.size();
    qDebug() << dataFromFile;
    for (auto k : cords)
        qDebug() << k;

}


void logRemake::closeEvent(QCloseEvent *)
{
    writeSettings();
}

logRemake::~logRemake()
{

}

